library(HW6)
rcpp_hello_world()
library(HW6)
library(HW6)
test(0,1)
?HW6
library(HW6)
test(3,4)
library(HW6)
test(3,3)
library(HW6)
??HW6
library(HW6)
library(HW6)
test(3,4)
??HW6
library(HW6)
test(4,4)
??HW6
library(HW6)
??HW6
library(HW6)
test(3,3)
??HW6
?test
library(HW6)
test(4,4)
??HW6
library(HW6)
library(HW6)
??Hw6
library(HW6)
??HW6
?test
library(HW6)
mode(4)
?mode
library(HW6)
?mode
library(HW6)
?mode
library(HW6)
mode(3.2)
library(HW6)
library(HW6)
library(HW6)
mode(c(1,2,3,4,5))
mode(1,1,1,2)
mode(c(1,1,1,2))
library(HW6)
mode(c(1,2,3))
library(HW6)
mode(c(1,2,3))
library(HW6)
mode(c(1,2,3))
library(HW6)
mode(c(1,2,3))
mode(Integer(0)
)
mode(Numeric(0))
mode(numeric(0))
library(HW6)
library(HW6)
library(HW6)
library(HW6)
mode(c(1, 2, 2, 2, 3, 3, 1, 3))
mode(c(1, 2, 2, 2, 3, 3, 1, 3))
mode(c(1, 2, 2, 3, 3, 1, 3))
mode(c(2, 2, 3, 3, 1, 3))
mode(c(2, 2, 3, 3, 1))
mode(c(2, 1, 3, 1))
mode(c("a", "b"))
mode(c(3.3, 4.7,3.3))
library(HW6)
perms(3)
library(HW6)
library(HW6)
mode(3)
perms(3)
library(HW6)
library(HW6)
perms(3)
perms(157)
library(HW6)
perms(3)
library(HW6)
perms(3)
perms(10)
perms(5)
?perms
library(HW6)
?simplify2array
simplify2array(list(c(1,2,3), c(4,5,6))
)
simplify2array(list(c(1,2,3), c(4,5,6, 7))
)
simplify_to_array
simplify2array
simplify2array(list(c(1,2,3), c("ala","ma", "kota")))
simplify2array(list(c(1,2,3), c(1,2,3,4)))
library(HW6)
simplify2array(3)
simplify2array(list(c(1,2,3), c(4,5,6)))
simplify2array(list(c(1,2,3), c(4,5,6)))
library(HW6)
simplify2array(list(c(1,2,3), c(4,5,6)))
simplify2array(list(c(1,2,3), c("a", "b", "c")))
base::simplify2array(c(1,2,3), c(4,5,6))
base::simplify2array(list(c(1,2,3), c(4,5,6)))
?simplify2array
library(HW6)
simplify2array(list(c(1,2,3), c("a", "b", "c")))
base::simplify2array(c(1,2,3), c(4,5,6))
simplify2array(list(c(1,2,3), c(4,5,6)))
library(HW6)
simplify2array(list(c(1,2,3), c(4,5,6)))
library(HW6)
simplify2array(list(c(1,2,3), c(4,5,6)))
simplify2array(list(c(1,2,3), c(4,5,6,7)))
simplify2array(list(c(1,2,3)))
simplify2array(list(c("a", "b", "c")))
library(HW6)
simplify2array(list(c("a", "b", "c")))
simplify2array(list(c("a", "b", "c")))
simplify2array(list())
library(HW6)
devtools::use_testthat()
getwd()
setwd("B:/Dropbox/IPI/ELearning/AdvancedR/8/HomeworkPackage/HW6")
devtools::use_testthat()
devtools::load_all(".")
library(HW6)
library(HW6)
devtools::test()
library(HW6)
devtools::test()
library(HW6)
library(HW6)
devtools::test()
library(HW6)
library(HW6)
devtools::test()
library(HW6)
mode(NA)
base::mode
median(c(1,2,3,1))
modeav
expect_equal(mode(NA), integer(0))
mode(c(1, 2, 1 , 1, 3))
mode(c(1, 2, 1 , 1, 3)) %in% c(1,2)
expect_that(mode(c(1, 2, 1 , 1, 3)) %in% c(1,2))
expect_true(mode(c(1, 2, 1 , 1, 3)) %in% c(1,2))
simplify2array(list(c(1,2,3), c(4,5,6)))
expect_equal(simplify2array(list(c(1,2,3), c(4,5,6))), matrix(c(1,2,3,4,5,6), nrow=2))
expect_equal(simplify2array(list(c(1,2,3), c(4,5,6))), matrix(c(1,2,3,4,5,6), ncol=2))
simplify2array(list(c(1,2,3,4,5,6)))
expect_equal(simplify2array(list(c(1,2,3,4,5,6))), c(1,2,3,4,5,6))
simplify2array(list(c(1,2,3), c(1,2,3,4)))
expect_equal(simplify2array(list(c(1,2,3), c(1,2,3,4))), list(c(1,2,3), c(1,2,3,4)))
simplify2array(list(c(1,2,3), c("a", "b","c"))
)
expect_error(simplify2array(list(c(1,2,3), c("a", "b","c"))))
simplify2array(list())
expect_equal(simplify2array(list()), numeric(0))
devtools::test()
library(HW6)
perms(1)
perms(0)
perms(1)
perms(2)
perms(3)
library(HW6)
perms(0)
matrix()
matrix(nrow=0,ncol=0)
expect_equal(perms(0), matrix(nrow=0,ncol))
expect_equal(perms(0), matrix(nrow=0,ncol=0))
?matrix
perms(0)
mode(perms(0))
mode(matrix(nrow=0,ncol=0))
perms(0)==matrix(nrow=0,ncol=0)
expect_equal(perms(0), matrix(nrow=0,ncol=0))
perms(1)
perms(1)==matrix(1)
expect_equal(perms(1),matrix(1))
perms(2)
perms(2), matrix(c(1,2,2,1), nrow=2)
expect_equal(perms(2), matrix(c(1,2,2,1), nrow=2))
perms(3)
expect_equal(perms(3), matrix(c(1,2,3,1,3,2,2,1,3,12,3,1,3,1,2,3,2,1), byrow=TRUE))
expect_equal(perms(3), matrix(c(1,2,3,1,3,2,2,1,3,12,3,1,3,1,2,3,2,1), byrow=TRUE, ncol=3))
matrix(c(1,2,3,1,3,2,2,1,3,12,3,1,3,1,2,3,2,1), byrow=TRUE, ncol=3)
expect_equal(perms(3), matrix(c(1,2,3,1,3,2,2,1,3,2,3,1,3,1,2,3,2,1), byrow=TRUE, ncol=3))
expect_error(perms(-1))
expect_error(perms(157))
perms(157)
perms(-1)
perms(0)
M=perms(0)
M
mode(M)
class(M)
expect_true(class(perms(0))=="matrix", mode(perms(0))=="integer", ncol(perms(0))==0, nrow(perms(0)==0))
expect_true(class(perms(0))=="matrix", mode(perms(0))=="integer", ncol(perms(0))==0, nrow(perms(0))==0)
expect_true(class(perms(0))=="matrix", mode(perms(0))=="integer")
expect_true(class(perms(0))=="matrix", mode(perms(0))=="integer", ncol(perms(0))==0)
nrow(M)
expect_true(class(perms(0))=="matrix", mode(perms(0))=="integer", ncol(perms(0))==0, nrow(perms(0))==0)
expect_true(class(perms(0))=="matrix", mode(perms(0))=="integer", ncol(perms(0))==0)
expect_true(class(perms(0))=="matrix", mode(perms(0))=="integer", ncol(perms(0))==0, nrow(perms(0))==0)
expect_true(class(perms(0))=="matrix", mode(perms(0))=="integer", ncol(perms(0))==0)
expect_true(class(perms(0))=="matrix", mode(perms(0))=="integer", ncol(perms(0))==0)
expect_equal(perms(2), matrix(c(1,2,2,1), nrow=2))
expect_equal(perms(3), matrix(c(1,2,3,1,3,2,2,1,3,2,3,1,3,1,2,3,2,1), byrow=TRUE, ncol=3))
expect_error(perms(-1))
expect_error(perms(157))
library(HW6)
install.packages("knitr")
